name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      TESTING: "true"
      OPENAI_API_KEY: "fake-api-key"
      MONGO_URI: "mongodb://localhost:27017"

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python -m pytest tests/ -v --cov=app

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: success()

  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ap-south-1

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin 042077470246.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      # Step 4: Build and tag the Docker image
      - name: Build Docker image
        run: |
          docker build -t adaptive-learning-api .
          docker tag adaptive-learning-api:latest 042077470246.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/adaptive-learning-api:latest

      # Step 5: Push the Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          docker push 042077470246.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/adaptive-learning-api:latest

      # Step 6: Create and deploy application version
      - name: Create and deploy application version
        run: |
          # Create a version label with timestamp
          VERSION_LABEL="app-$(date +%Y%m%d%H%M%S)"
          
          # Create a zip file of the application
          zip -r app.zip . -x "*.git*"
          
          # Get account ID
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          
          # Upload the application zip to S3
          aws s3 cp app.zip s3://elasticbeanstalk-${{ env.AWS_REGION }}-$ACCOUNT_ID/adaptive-learning-api/$VERSION_LABEL.zip
          
          # Create the application version
          aws elasticbeanstalk create-application-version \
            --application-name adaptive-learning-api \
            --version-label $VERSION_LABEL \
            --source-bundle S3Bucket=elasticbeanstalk-${{ env.AWS_REGION }}-$ACCOUNT_ID,S3Key=adaptive-learning-api/$VERSION_LABEL.zip \
            --auto-create-application
          
          echo "Waiting for application version to be processed..."
          
          # Poll for the application version to be processed (with timeout)
          MAX_ATTEMPTS=20  # 20 attempts * 15 seconds = 5 minutes max wait time
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Check attempt $ATTEMPT of $MAX_ATTEMPTS..."
            
            # Get the current status of the application version
            STATUS=$(aws elasticbeanstalk describe-application-versions \
              --application-name adaptive-learning-api \
              --version-labels $VERSION_LABEL \
              --query "ApplicationVersions[0].Status" \
              --output text)
            
            echo "Current status: $STATUS"
            
            # If the status is PROCESSED, we can proceed
            if [ "$STATUS" = "PROCESSED" ]; then
              echo "Application version is now processed. Proceeding with deployment."
              break
            fi
            
            # If we've reached the maximum number of attempts, exit with an error
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "Timed out waiting for application version to be processed."
              exit 1
            fi
            
            # Wait for 15 seconds before checking again
            echo "Waiting 15 seconds before checking again..."
            sleep 15
            ATTEMPT=$((ATTEMPT+1))
          done
          
          # Update the environment with the new version
          echo "Deploying version $VERSION_LABEL to environment Social-reciprocity-learn-env"
          aws elasticbeanstalk update-environment \
            --environment-name Social-reciprocity-learn-env \
            --version-label $VERSION_LABEL