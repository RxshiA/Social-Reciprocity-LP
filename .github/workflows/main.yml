name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      TESTING: "true"
      OPENAI_API_KEY: "fake-api-key"
      MONGO_URI: "mongodb://localhost:27017"

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python -m pytest tests/ -v --cov=app

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: success()

  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ap-south-1
      EB_ENVIRONMENT: adaptive-learning-test-env  # Your new environment name
      EB_APPLICATION: adaptive-learning-api  # Your new application name

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin 042077470246.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      # Step 4: Build and tag the Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ env.EB_APPLICATION }} .
          docker tag ${{ env.EB_APPLICATION }}:latest 042077470246.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.EB_APPLICATION }}:latest

      # Step 5: Push the Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          docker push 042077470246.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.EB_APPLICATION }}:latest

      # Step 6: Create a Dockerrun.aws.json file
      - name: Create Dockerrun.aws.json
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          cat > Dockerrun.aws.json << EOF
          {
            "AWSEBDockerrunVersion": "1",
            "Image": {
              "Name": "042077470246.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.EB_APPLICATION }}:latest",
              "Update": "true"
            },
            "Ports": [
              {
                "ContainerPort": "8000",
                "HostPort": "8000"
              }
            ]
          }
          EOF
          cat Dockerrun.aws.json

      # Step 7: Create and deploy application version
      - name: Create and deploy application version
        run: |
          # Create a version label with timestamp
          VERSION_LABEL="v-$(date +%Y%m%d%H%M%S)"
          
          # Create a zip file with just the Dockerrun.aws.json
          zip -r deploy.zip Dockerrun.aws.json
          
          # Get account ID
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          
          # Check if the application exists
          if ! aws elasticbeanstalk describe-applications --application-names ${{ env.EB_APPLICATION }} > /dev/null 2>&1; then
            echo "Creating application ${{ env.EB_APPLICATION }}..."
            aws elasticbeanstalk create-application --application-name ${{ env.EB_APPLICATION }}
          fi
          
          # Upload the deployment package to S3
          S3_BUCKET="elasticbeanstalk-${{ env.AWS_REGION }}-$ACCOUNT_ID"
          S3_KEY="${{ env.EB_APPLICATION }}/$VERSION_LABEL.zip"
          
          echo "Uploading deployment package to S3..."
          aws s3 cp deploy.zip s3://$S3_BUCKET/$S3_KEY
          
          # Create the application version
          echo "Creating application version $VERSION_LABEL..."
          aws elasticbeanstalk create-application-version \
            --application-name ${{ env.EB_APPLICATION }} \
            --version-label $VERSION_LABEL \
            --source-bundle S3Bucket=$S3_BUCKET,S3Key=$S3_KEY
          
          # Check if the environment exists
          if ! aws elasticbeanstalk describe-environments \
              --environment-names ${{ env.EB_ENVIRONMENT }} \
              --application-name ${{ env.EB_APPLICATION }} \
              --query "Environments[?Status!='Terminated']" \
              --output text > /dev/null 2>&1; then
            
            echo "Creating environment ${{ env.EB_ENVIRONMENT }}..."
            aws elasticbeanstalk create-environment \
              --application-name ${{ env.EB_APPLICATION }} \
              --environment-name ${{ env.EB_ENVIRONMENT }} \
              --solution-stack-name "64bit Amazon Linux 2 v3.6.0 running Docker" \
              --version-label $VERSION_LABEL
          else
            echo "Updating environment ${{ env.EB_ENVIRONMENT }}..."
            aws elasticbeanstalk update-environment \
              --environment-name ${{ env.EB_ENVIRONMENT }} \
              --version-label $VERSION_LABEL
          fi
          
          echo "Deployment initiated. Waiting for environment to be updated..."